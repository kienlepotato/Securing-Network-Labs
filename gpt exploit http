import socket
import ssl
import threading
import time

from h2.connection import H2Connection
from h2.events import ResponseReceived, DataReceived, SettingsAcknowledged
from h2.settings import SettingCodes


def http2_test_client(hostname, port=443):
    try:
        # Create and wrap socket with SSL
        context = ssl.create_default_context()
        context.set_alpn_protocols(["h2"])
        sock = socket.create_connection((hostname, port))
        tls_sock = context.wrap_socket(sock, server_hostname=hostname)

        # Confirm negotiated HTTP/2
        negotiated_protocol = tls_sock.selected_alpn_protocol()
        if negotiated_protocol != "h2":
            print(f"[!] Failed to negotiate HTTP/2 (got: {negotiated_protocol})")
            return

        print("[*] Connected and negotiated HTTP/2")

        # Initialize HTTP/2 connection
        conn = H2Connection()
        conn.initiate_connection()
        tls_sock.sendall(conn.data_to_send())

        # Optionally modify settings (e.g., INITIAL_WINDOW_SIZE)
        conn.update_settings({
            SettingCodes.INITIAL_WINDOW_SIZE: 65535,
        })
        tls_sock.sendall(conn.data_to_send())

        # Receive server SETTINGS and acknowledge
        data = tls_sock.recv(65535)
        events = conn.receive_data(data)
        for event in events:
            if isinstance(event, SettingsAcknowledged):
                print("[*] Settings acknowledged by server")

        # Send a basic GET request
        stream_id = conn.get_next_available_stream_id()
        conn.send_headers(
            stream_id,
            [
                (':method', 'GET'),
                (':path', '/'),
                (':scheme', 'https'),
                (':authority', hostname),
            ],
            end_stream=True
        )
        tls_sock.sendall(conn.data_to_send())

        # Read response
        while True:
            data = tls_sock.recv(65535)
            if not data:
                break
            events = conn.receive_data(data)
            for event in events:
                if isinstance(event, ResponseReceived):
                    print("[*] Response headers received:")
                    for header in event.headers:
                        print(f"    {header[0]}: {header[1]}")
                elif isinstance(event, DataReceived):
                    print(f"[*] Received {len(event.data)} bytes of data")
                    conn.acknowledge_received_data(event.flow_controlled_length, event.stream_id)
            tls_sock.sendall(conn.data_to_send())

    except Exception as e:
        print(f"[!] Error: {e}")
    finally:
        try:
            tls_sock.close()
        except:
            pass


# Example usage
target_host = "localhost"  # Replace with authorized test server
num_threads = 5
threads = []

for _ in range(num_threads):
    thread = threading.Thread(target=http2_test_client, args=(target_host,))
    thread.start()
    threads.append(thread)

for thread in threads:
    thread.join()

print("[*] Test complete.")

#Before running the script, install h2 if you havenâ€™t: pip install h2
